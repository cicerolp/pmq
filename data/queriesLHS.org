# -*- org-export-babel-evaluate: nil; -*-
#+TITLE: Design of Experiment - Queries Dataset
#+LANGUAGE: en 
#+STARTUP: indent
#+STARTUP: logdrawer hideblocks
#+SEQ_TODO: TODO INPROGRESS(i) | DONE DEFERRED(@) CANCELED(@)
#+TAGS: @JULIO(J) @CICERO(C)
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n) export(e)
#+CATEGORY: TwitterVis
#+OPTIONS: ^:{} H:3 tags:nil todo:nil
#+PROPERTY: header-args :cache no :eval no-export

* Random Data

** Preliminary Tests                                              :noexport:

*** Varying Radius only up to 400 km

#+begin_src R :results output :exports both :session 
n = 10**4
x <- runif(n,min=-179,max=179)
y <- runif(n,min=-89,max=89)

rand_pts <- data.frame(lon = x, lat = y)
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session 
ggplot(rand_pts,aes(x=lon,y=lat)) + 
geom_tile(data=d5_HD, aes(x=lon, y=lat, width=R/( 111.31 * cos(lat/57.3)),height=R/111.31) ,color="black", fill="red") +
geom_point(alpha=0.1)  

#+end_src

#+RESULTS:
[[file:/tmp/babel-27753x0V/figure27753BYT.png]]


Make width of queries relative to the lat x lon in degrees instead of KM
#+begin_src R :results output :exports both :session 
w <- runif(25,min=1,max=360)
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session 
library(DoE.wrapper)
set.seed(42);
d6_llw = lhs.design( type= "maximin" , nruns= 10 ,nfactors= 3 ,seed= 42 , 
                   factor.names=list( lat=c(-89,+89),lon=c(-179,179),width=c(0.1,180) ) )

                                        #Response5 = 10 + 2*as.numeric(d5_HD$A) + 3*as.numeric(d5_HD$B)*as.numeric(d5_HD$C) +
#rnorm(nrow(d5_HD),sd=1)
#d5_HD <- add.response(d5_HD, Response5, replace=TRUE)
plot(d6_llw ,main="LHS design")
#+end_src

#+RESULTS:
[[file:/tmp/babel-27753x0V/figure277532Bz.png]]

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session 
ggplot(rand_pts,aes(x=lon,y=lat)) + 
geom_tile(data=d6_llw, aes(x=lon, y=lat, width=width,height=width/2) ,color="black", fill="blue", alpha=0.1) +
geom_point(alpha=0.1)  
#+end_src

#+RESULTS:
[[file:/tmp/babel-27753x0V/figure27753ctm.png]]

*** No variability in Width

#+begin_src R :results output :exports both :session 
w = 360/(2**c(1:10))
#w

#probability
p = (w*(w/2)) / (360 * 180)
fp = sprintf("%0.6f",p*100)
#probable number of elements in a dataset of 10**6 elements
fn = sprintf("%0.2f",10**6 * p)

dfwuni = data.frame(width=w,percent=fp,expElt=fn)
dfwuni
#+end_src

#+RESULTS:
#+begin_example
    width   percent    expElt
1  180.00 25.000000 250000.00
2   90.00  6.250000  62500.00
3   45.00  1.562500  15625.00
4   22.50  0.390625   3906.25
5   11.25  0.097656    976.56
6    5.62  0.024414    244.14
7    2.81  0.006104     61.04
8    1.41  0.001526     15.26
9    0.70  0.000381      3.81
10   0.35  0.000095      0.95
#+end_example

*** Using LHS variabilty in Width 

#+begin_src R :results output :exports both :session 
w = 360/(2**c(1:10))
w_lhs = lhs.design( type= "maximin" , nruns= 10 ,nfactors=1 , seed=42 ,
           factor.names=list( width=c(w[length(w)],180) ) )

dfwlhs = data.frame(width=w_lhs$width,"percent "= (w_lhs$width*(w_lhs$width/2)) / (360 * 180) * 100)

format(dfwlhs[order(dfwlhs$width,decreasing=TRUE),],scientific=FALSE, digits=3)
# print(df)
#+end_src

#+RESULTS:
#+begin_example
    width  percent.
10 175.49 23.762202
2  155.57 18.674061
3  143.55 15.900255
6  114.37 10.093503
4  101.30  7.917472
8   86.31  5.748302
5   60.24  2.800201
7   43.45  1.456473
1   34.27  0.906284
9    1.06  0.000866
#+end_example
*** Coordinates LHS To avoid out-of-bound queries

#+begin_src R :results output :exports both :session 

set.seed(42);

wq = dfwuni$width[1] / 2
hq = wq/2

wq
hq

d7_llw = lhs.design( type= "maximin" , nruns= 10 ,nfactors=2 ,seed= 42 , 
                   factor.names=list( 
                       lat=c(-90+hq/2,+90-hq/2),
                       lon=c(-180+wq/2,180-wq/2) ) )

#d7_llw$width = runif(10,min=0.1,max=180)
d7_llw$width = wq
d7_llw$height = hq
d7_llw
#+end_src

#+RESULTS:
#+begin_example
[1] 90
[1] 45
     lat  lon width height
1  -24.2  106    90     45
2   26.0  -88    90     45
3  -63.0  -13    90     45
4   -3.5   17    90     45
5   35.5   33    90     45
6    2.9  -43    90     45
7   53.2  -55    90     45
8  -30.5   74    90     45
9  -46.8 -135    90     45
10  62.2  131    90     45
class=design, type= lhs
#+end_example

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session 
ggplot(rand_pts,aes(x=lon,y=lat)) + 
geom_tile(data=d7_llw, aes(x=lon, y=lat, width=width,height=height) ,color="black", fill="blue", alpha=0.1) +
geom_point(alpha=0.1)  
#+end_src

#+RESULTS:
[[file:/tmp/babel-27753x0V/figure27753PxI.png]]



** DONE Coordinates LHS To avoid out-of-bound queries + LAPPLY + RBIND

#+begin_src R :results output :exports both :session 
library(DoE.wrapper)
#+end_src

Generates 8 sizes of width and height ( queries are square regions): 
#+begin_src R :results output :exports both :session 
dfwuni = data.frame( width = 360/(2**c(1:8)))
dfwuni$height = dfwuni$width
dfwuni$width
#+end_src

#+RESULTS:
: [1] 180.00000  90.00000  45.00000  22.50000  11.25000   5.62500   2.81250
: [8]   1.40625

Compute the percentage of the whole are that each query represents 
and the expected amount of elements in each query, assuming =n= uniform data points.
#+begin_src R :results table :exports both :session :colnames yes
n = 10**6 
dfwuni$percent = ( dfwuni$width *  dfwuni$height) / (360*180) * 100
dfwuni$expElts = round(( dfwuni$percent ) / 100 * n,2)
dfwuni
#+end_src

#+RESULTS:
|   width |  height | percent |   expElts |
|---------+---------+---------+-----------|
| 180.000 | 180.000 |  50.000 | 500000.00 |
|  90.000 |  90.000 |  12.500 | 125000.00 |
|  45.000 |  45.000 |   3.125 |  31250.00 |
|  22.500 |  22.500 |   0.781 |   7812.50 |
|  11.250 |  11.250 |   0.195 |   1953.12 |
|   5.625 |   5.625 |   0.049 |    488.28 |
|   2.812 |   2.812 |   0.012 |    122.07 |
|   1.406 |   1.406 |   0.003 |     30.52 |
#+TBLFM: $4=$0;%.2f::@2$1..@9$3=$0;%.3f


Function: for a given width generates 10 position using LHS desing
Note: we limit latitude between -85.051132f and +85.051132f

#+begin_src R :results output :exports both :session :colnames yes

latr = c(-85.051132,+85.051132)   # boundaries of latitude to generate the queries

flhs = function(w){
    wq = w / 2
    hq = wq # square queries

    d = lhs.design( type= "maximin" , nruns= 10 ,nfactors=2 , 
                   factor.names=list( 
                       lat=c(latr[1]+hq/2 , latr[2]-hq/2),
                       lon=c(-180+wq/2,180-wq/2)) 
                   )

    d$width = wq
    d$height = hq
    d
}
#+end_src

Generates queries position for each value of Width.
#+begin_src R :results table :exports both :session :colnames yes 
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height) 

d8_llw = do.call( rbind, 
                 lapply(dfwuni$width,flhs) 
                 )
d8_llw
#+end_src

#+RESULTS:
|               lat |               lon |    width |   height |
|-------------------+-------------------+----------+----------|
| -14.3493546448834 |  106.191921438323 |       90 |       90 |
|  15.4244144363771 | -88.1794538728427 |       90 |       90 |
| -37.3820934128109 |  -13.093290094519 |       90 |       90 |
| -2.05076308297226 |  16.7172994811553 |       90 |       90 |
|   21.036225209632 |   32.863257852383 |       90 |       90 |
|  1.73470416087192 | -43.4984842264094 |       90 |       90 |
|  31.5790700927912 | -55.0095836282708 |       90 |       90 |
| -18.1037592134904 |  73.7976394544821 |       90 |       90 |
| -27.7485520671238 | -134.938629915705 |       90 |       90 |
|  36.9175889949035 |   130.59364210465 |       90 |       90 |
| -35.5549199437257 | -49.0667738767807 |       45 |       45 |
| -12.9136518229265 | -142.235480222502 |       45 |       45 |
|  15.6682550774119 |  39.6802343758755 |       45 |       45 |
|  56.8206194204371 |  20.4710888847476 |       45 |       45 |
|  4.20860334513941 |  96.4199170080246 |       45 |       45 |
|  -6.8641012638202 | -99.5792164464947 |       45 |       45 |
| -42.8512869475549 |  74.1305368883768 |       45 |       45 |
|   44.378300238729 |  154.120635705418 |       45 |       45 |
| -56.4202179620136 | -89.0935884352075 |       45 |       45 |
|   31.813317735102 | -1.21376757952384 |       45 |       45 |
|  19.1414529638831 |  55.8126480814814 |     22.5 |     22.5 |
|  13.2998002539016 | -34.0707340200618 |     22.5 |     22.5 |
|  35.8717183468491 |  148.333908895291 |     22.5 |     22.5 |
| -42.1854247030523 | -91.8337259314209 |     22.5 |     22.5 |
| -50.7032239948399 |  31.5703097031638 |     22.5 |     22.5 |
| -9.47001385862008 | -5.33383757252245 |     22.5 |     22.5 |
|  54.9427600039355 |  92.8648469989747 |     22.5 |     22.5 |
| -60.1619304458052 | -168.719715113901 |     22.5 |     22.5 |
|  61.4079455446266 | -121.560545164198 |     22.5 |     22.5 |
| -19.5522830385435 |  117.497359270901 |     22.5 |     22.5 |
|  26.8460469613345 | -86.7061908625066 |    11.25 |    11.25 |
| -71.2499329740293 |  19.0275406681001 |    11.25 |    11.25 |
| -24.6636928545306 |  72.6859032319486 |    11.25 |    11.25 |
|  62.4341038272367 | -138.946287263781 |    11.25 |    11.25 |
|  -9.3077281429288 |  42.7969261367619 |    11.25 |    11.25 |
|  33.3548903705589 |  -157.55561523661 |    11.25 |    11.25 |
|  -53.216055925603 | -2.74401732988656 |    11.25 |    11.25 |
|   -41.89770769228 |  169.347108453512 |    11.25 |    11.25 |
|  68.3241951232553 |   120.88230538927 |    11.25 |    11.25 |
|  2.26741934303847 | -41.5867615021765 |    11.25 |    11.25 |
|  44.6880988516361 |  34.0700163405389 |    5.625 |    5.625 |
| -24.3715509693623 | -135.574726889804 |    5.625 |    5.625 |
| -40.0913398614824 | -79.4118904665112 |    5.625 |    5.625 |
| -54.8216554405391 |  114.289496399034 |    5.625 |    5.625 |
|   55.032536892578 |  82.2148375709168 |    5.625 |    5.625 |
|  80.6757688441277 | -28.3804094088077 |    5.625 |    5.625 |
|  11.2004796967208 |  40.3136293663829 |    5.625 |    5.625 |
|   -80.48015139018 | -67.5890630135685 |    5.625 |    5.625 |
| -1.37424758501351 |  151.579021846596 |    5.625 |    5.625 |
|  31.0175376938283 | -149.809676820375 |    5.625 |    5.625 |
|  14.6201521000117 |  24.9091573784593 |   2.8125 |   2.8125 |
|  25.3026688327231 |  88.6147659299243 |   2.8125 |   2.8125 |
| -63.5362741584498 | -175.019807462888 |   2.8125 |   2.8125 |
| -25.5505333051477 | -131.728942970419 |   2.8125 |   2.8125 |
|  63.1046955762673 |  67.9063633276057 |   2.8125 |   2.8125 |
| -78.0322845350727 | -42.0087115187198 |   2.8125 |   2.8125 |
|  -13.047290320823 | -8.35406006532721 |   2.8125 |   2.8125 |
|    76.29152093287 |  158.005831808876 |   2.8125 |   2.8125 |
| -36.1564045819491 |   117.42309138733 |   2.8125 |   2.8125 |
|  41.3302158810887 | -79.2682332687266 |   2.8125 |   2.8125 |
|  45.3211797356443 |  60.2884843561007 |  1.40625 |  1.40625 |
| -18.2615914124669 |  14.6459847413656 |  1.40625 |  1.40625 |
| -43.4834474890982 | -88.3117018651078 |  1.40625 |  1.40625 |
|  74.4582158320234 |  111.081537454757 |  1.40625 |  1.40625 |
|  23.2851150925853 | -172.199699290446 |  1.40625 |  1.40625 |
| -55.2488413014007 |  72.1147842097981 |  1.40625 |  1.40625 |
| -1.36886958831223 | -111.157797594164 |  1.40625 |  1.40625 |
|  12.7225756934099 |  177.575916287787 |  1.40625 |  1.40625 |
|  61.1636542462045 | -12.3376143126749 |  1.40625 |  1.40625 |
| -77.9161933314172 | -69.3673819185328 |  1.40625 |  1.40625 |
|  2.01030733247753 | -54.7268377265893 | 0.703125 | 0.703125 |
| -1.26474101402797 | -87.1117708466016 | 0.703125 | 0.703125 |
|  49.3420117593929 |  98.9704451168887 | 0.703125 | 0.703125 |
|  78.4491387150902 |  64.4555897645839 | 0.703125 | 0.703125 |
| -18.2351229283027 |  5.90771964548156 | 0.703125 | 0.703125 |
| -64.4925459823431 |  -176.09267545538 | 0.703125 | 0.703125 |
| -70.6548868421186 | -6.97336663395167 | 0.703125 | 0.703125 |
| -46.0891664317343 |  123.889142479841 | 0.703125 | 0.703125 |
|  61.4223853012035 |  157.003497270197 | 0.703125 | 0.703125 |
|  23.4164829858206 | -110.831846919339 | 0.703125 | 0.703125 |

*** Visualization of queries with 10**4 sample elements
#+begin_src R :results output graphics :file "./img/randomLhsQueries.png" :exports both :width 600 :height 400 :session 
library(tidyverse)

set.seed(42);
n = 10**4
x <- runif(n,min=-179,max=179)
y <- runif(n,min=-89,max=89)

data.frame(lon = x, lat = y) %>% 
ggplot(aes(x=lon,y=lat)) + 
geom_tile(data=d8_llw, aes(x=lon, y=lat, width=width,height=height) ,color="black", fill="blue", alpha=0.1) +
geom_point(alpha=0.1)  
#+end_src

#+RESULTS:
[[file:./img/randomLhsQueries.png]]


** DONE OUTPUT to CSV

Convert to columns to bounding box coordinates

#+begin_src R :results output :exports both :session 
d = d8_llw
bbox = data.frame(lat0 = d$lat + d$width/2 ,
                  lon0 = d$lon - d$height/2 ,
                  lat1 = d$lat - d$width/2 ,
                  lon1 = d$lon + d$height/2)
tail(bbox)
#+end_src

#+RESULTS:
:         lat0        lon0      lat1        lon1
: 75 -17.88356    5.556157 -18.58669    6.259282
: 76 -64.14098 -176.444238 -64.84411 -175.741113
: 77 -70.30332   -7.324929 -71.00645   -6.621804
: 78 -45.73760  123.537580 -46.44073  124.240705
: 79  61.77395  156.651935  61.07082  157.355060
: 80  23.76805 -111.183409  23.06492 -110.480284

Write the csv file of bounding boxes
#+begin_src R :results output :exports both :session 
write.table(bbox,"queriesLHS.csv",row.names=FALSE,col.names=FALSE,sep=",")
#write.csv(bbox,"queries.csv",row.names=FALSE)
#+end_src

** CANCELED Convert the width in degrees to KM                    :noexport:

input benchmark receives lat lon and Radius ( Width in KM / 2 ) 

Canceled: we will query degrees directly 


* Twitter Data

Description:
- Get n random position from the dataset of tweets. 
  [[file:tweet10_6.dat]] or from geo-tweets.dat


- generate queries with 10 different widths
