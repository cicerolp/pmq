# -*- org-export-babel-evaluate: t; -*-
#+TITLE: Experiment Diary
#+LANGUAGE: en 
#+STARTUP: indent
#+STARTUP: logdrawer hideblocks
#+SEQ_TODO: TODO INPROGRESS(i) | DONE DEFERRED(@) CANCELED(@)
#+TAGS: @JULIO(J)
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n) ignore(n) export(e)
#+CATEGORY: exp
#+OPTIONS: ^:{} todo:nil H:4
#+PROPERTY: header-args :cache no :eval no-export 


* DONE Description 

Test the queries on uniform data. 
And compare the folling performances 

- PMQ / GEOHASH
- BTREE 
- RTREE

Use the refinement level = 8 

** Standalone script 
To generate the results outside emacs and orgmode you can use the standalone scripts, generated from the tangled source blocks in this file

- parse.sh : parse the results to CSV
- plotResults.R : generate the plots 
  

* TODO Experiment Script
** DONE Initial Setup 

#+begin_src sh :results value :exports both
expId=$(basename $(pwd))
echo $expId
#+end_src

#+NAME: expId
#+RESULTS:
: exp20170830124159

Set up git branch
#+begin_src sh :results output :exports both
git checkout master
#+end_src

#+RESULTS:
: M	LabBook.org
: M	include/BTreeCtn.cpp
: M	include/GeoHash.cpp

Create EXP branch
#+begin_src sh :results output :exports both :var expId=expId
git checkout -b $expId
#+end_src

#+RESULTS:
: M	LabBook.org
: M	include/BTreeCtn.cpp
: M	include/GeoHash.cpp

Commit branch
#+begin_src sh :results output :exports both :var expId=expId
git status .
git add exp.org
git commit -m "Initial commit for $expId"
#+end_src

#+RESULTS:
#+begin_example
On branch exp20170830124159
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.#exp.org
	exp.org
	output.csv
	output.log

nothing added to commit but untracked files present (use "git add" to track)
[exp20170830124159 3d30984] Initial commit for exp20170830124159
 1 file changed, 588 insertions(+)
 create mode 100644 data/cicero/exp20170830124159/exp.org
#+end_example

#+begin_src sh :results output :exports both :var expId=expId
git la -3 
#+end_src

#+RESULTS:
: * 94ef664 (HEAD -> exp20170830124159) upd: disable refinements log
: * 3d30984 Initial commit for exp20170830124159
: * 381743e (master) print parameter

** DONE Export run script 

Use C-u C-c C-v t to tangle this script 
#+begin_src sh :results output :exports both :tangle run.sh :shebang #!/bin/bash :eval never :var expId=expId
set -e
# Any subsequent(*) commands which fail will cause the shell script to exit immediately
echo $(hostname) 

##########################################################
### SETUP THIS VARIABLES

BUILDIR=~/Projects/pmq/build-release
PMABUILD_DIR=~/Projects/hppsimulations/build-release
DATADIR=$(pwd)
# workaround as :var arguments are not been correctly tangled by my orgmode
#expId=$(basename $(pwd) | sed 's/exp//g')
expId=$(basename $(pwd))
TMPDIR=/dev/shm/$expId

# generate output name
if [ $1 ] ; then 
    EXECID=$1
else
    EXECID=$(date +%s)
fi

#########################################################

mkdir -p $TMPDIR
#mkdir -p $DATADIR

# make pma
mkdir -p $PMABUILD_DIR
cd $PMABUILD_DIR
cmake -DCMAKE_BUILD_TYPE="Release" -DTWITTERVIS=ON -DRHO_INIT=OFF ../pma_cd
make 

# make twitterVis
mkdir -p $BUILDIR
cd $BUILDIR 
cmake -DPMA_BUILD_DIR=$PMABUILD_DIR -DCMAKE_BUILD_TYPE="Release" ..
make

#get machine configuration
echo "" > $DATADIR/info.org
~/Projects/pmq/scripts/g5k_get_info.sh $DATADIR/info.org 

# EXECUTE BENCHMARK

#Continue execution even if one these fails
set +e 

#Run queris
t=10000
b=100
#n=$(($t*$b))
ref=8
stdbuf -oL ./benchmarks/bench_queries_region -seed 123 -rate 100 -x 10 -rate ${b} -min_t ${t} -max_t ${t} -ref ${ref} -bf ../data/queriesLHS.csv >  ${TMPDIR}/bench_queries_region_random_${t}_${b}_${ref}_${EXECID}.log

set -e

cd $TMPDIR
tar -cvzf log_$EXECID.tgz *_$EXECID.log

cd $DATADIR
cp $TMPDIR/log_$EXECID.tgz .

git checkout $expId

git add info.org log_$EXECID.tgz run.sh 
git add -u
git commit -m "Finish execution $EXECID"
git push origin $expId
#+end_src 


** TODO Commit local changes
#+begin_src sh :results output :exports both
git status .
#+end_src

#+RESULTS:
#+begin_example
On branch exp20170830124159
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   exp.org

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.#exp.org
	output.csv
	output.log
	run.sh

no changes added to commit (use "git add" and/or "git commit -a")
#+end_example

#+begin_src sh :results output :exports both
git add run.sh exp.org
git commit -m "UPD: run.sh script"
#git commit --amend -m "UPD: run.sh script"
#+end_src

#+RESULTS:
: [exp20170830124159 8f2bf8f] UPD: run.sh script
:  2 files changed, 92 insertions(+), 15 deletions(-)
:  create mode 100755 data/cicero/exp20170830124159/run.sh

Push to remote
#+begin_src sh :results output :exports both :var expId=expId
#git push bitbucket $expId
git push origin $expId
#+end_src

#+RESULTS:

** CANCELED Local Execution                                          :local:
:LOGBOOK:
- State "CANCELED"   from "TODO"       [2017-09-05 Ter 19:00]
:END:

#+begin_src sh :results output :exports both :session local :var expId=expId
cd ~/Projects/pmq/data/$(hostname)/$expId
runid=$(date +%s)
tmux new -d -s runExp "cd ~/Projects/pmq/data/$(hostname)/$expId; ./run.sh ${runid} &> run_${runid}"
git add run_$runid
echo $runid
#+end_src

Check process running
#+begin_src sh :results output :exports both :session remote
tmux ls
ps ux
#+end_src

** INPROGRESS Remote Execution                                      :remote:

*** Get new changes on remote                                      :remote:
#+begin_src sh :session remote :results output :exports both 
ssh -A cicero
#+end_src

#+RESULTS:
#+begin_example

Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-92-generic x86_64)

 ,* Documentation:  https://help.ubuntu.com
 ,* Management:     https://landscape.canonical.com
 ,* Support:        https://ubuntu.com/advantage

27 packages can be updated.
0 updates are security updates.

,*** System restart required ***
Last login: Mon Sep  4 19:50:32 2017 from 143.54.13.218
#+end_example

Get the last script on the remote machine (require entering a password
for bitbucket)
#+begin_src sh :session remote :results output :exports both :var expId=expId
cd ~/Projects/pmq/
git config --add remote.origin.fetch refs/heads/$expId:refs/remotes/origin/$expId
git fetch origin $expId
git checkout $expId
git pull origin $expId
git log -1 | cat 
#+end_src

#+RESULTS:
#+begin_example

julio@cicero:~/Projects/pmq$ julio@cicero:~/Projects/pmq$ From bitbucket.org:jtoss/pmq
FETCH_HEAD
Already on 'exp20170830124159'
Your branch is up-to-date with 'origin/exp20170830124159'.
From bitbucket.org:jtoss/pmq
FETCH_HEAD
Already up-to-date.
commit 8f2bf8f9949702720b2f3ba24d60ed6e4d3968a9
Date:   Tue Sep 5 18:59:16 2017 -0300

    UPD: run.sh script
#+end_example

Update PMA repository on exp machine
#+begin_src sh :session remote :results output :exports both :var expId=expId
cd ~/Projects/hppsimulations/
git pull origin PMA_2016
git log -1 | cat
#+end_src

#+RESULTS:
: 
: julio@cicero:~/Projects/hppsimulations$ From bitbucket.org:joaocomba/pma
: FETCH_HEAD
: Already up-to-date.
: commit 011775f5fdeaeeff330da7df39751d9c5323b570
: Date:   Mon Feb 13 12:20:46 2017 -0200
: 
:     Bugfix: corrected pointer casts

*** INPROGRESS Execute Remotely                                    :remote:

Opens ssh connection and a tmux session

#+begin_src sh :results output :exports both :session remote :var expId=expId
cd ~/Projects/pmq/data/cicero/$expId
runid=$(date +%s)
tmux new -d -s runExp "cd ~/Projects/pmq/data/cicero/$expId; ./run.sh ${runid} &> run_${runid}"
git add run_$runid
echo $runid
#+end_src

#+RESULTS:
: 
: julio@cicero:~/Projects/pmq/data/cicero/exp20170830124159$ julio@cicero:~/Projects/pmq/data/cicero/exp20170830124159$ julio@cicero:~/Projects/pmq/data/cicero/exp20170830124159$ julio@cicero:~/Projects/pmq/data/cicero/exp20170830124159$ 1504649431

Check process running
#+begin_src sh :results output :exports both :session remote
tmux ls
ps ux
#+end_src

#+RESULTS:
#+begin_example
runExp: 1 windows (created Tue Sep  5 19:10:31 2017) [80x23]
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
julio    20570  0.0  0.0  45248  4692 ?        Ss   18:59   0:00 /lib/systemd/sy
julio    20571  0.0  0.0 145408  2160 ?        S    18:59   0:00 (sd-pam)
julio    20662  0.0  0.0  97464  3408 ?        S    18:59   0:00 sshd: julio@pts
julio    20665  0.0  0.0  22684  5224 pts/18   Ss   18:59   0:00 -bash
julio    21185  0.0  0.0  97464  3352 ?        S    19:04   0:00 sshd: julio@pts
julio    21186  0.0  0.0  23700  6376 pts/19   Ss+  19:04   0:00 -bash
julio    21395  0.0  0.0  29420  2896 ?        Ss   19:10   0:00 tmux new -d -s 
julio    21396  0.0  0.0  12532  2960 pts/20   Ss+  19:10   0:00 bash -c cd ~/Pr
julio    21398  0.0  0.0  12536  2908 pts/20   S+   19:10   0:00 /bin/bash ./run
julio    21520  0.0  0.0   9676  2364 pts/20   S+   19:10   0:00 make
julio    21523  0.0  0.0   9676  2364 pts/20   S+   19:10   0:00 make -f CMakeFi
julio    21671  1.2  0.0  12208  4816 pts/20   S+   19:11   0:00 make -f benchma
julio    21674  0.0  0.0   4508   748 pts/20   S+   19:11   0:00 /bin/sh -c cd /
julio    21675  0.0  0.0   8352   716 pts/20   S+   19:11   0:00 /usr/bin/c++ -I
julio    21676 95.4  1.7 680016 582236 pts/20  R+   19:11   0:04 /usr/lib/gcc/x8
julio    21678  0.0  0.0  37368  3324 pts/18   R+   19:11   0:00 ps ux
#+end_example

**** TODO Pull local 
#+begin_src sh :results output :exports both :var expId=expId
#git commit -a -m "wip"
git status
git pull origin $expId
#+end_src


* Analisys
** Generate csv files
:PROPERTIES: 
:HEADER-ARGS:sh: :tangle parse.sh :shebang #!/bin/bash
:END:      

List logFiles
#+begin_src sh :results table :exports both
ls -htl *tgz
#+end_src

#+RESULTS:
| -rw-rw-r-- 1 julio julio 861K Ago 23 14:41 log_1503497835.tgz |

#+NAME: logFile
#+begin_src sh :results output :exports both 
#tar xvzf log_1503497835.tgz
scp cicero:~/Projects/pmq/build-release/output.log .
ls output.log
#+end_src

#+RESULTS: logFile
: output.log

Create CSV using logFile 
#+begin_src sh :results output :exports both :var logFile=logFile[0]
#echo $logFile
echo $(basename -s .log $logFile ).csv
grep "query" $logFile | sed "s/QueryBench//g" >  $(basename -s .log $logFile ).csv
#+end_src

#+NAME: csvFile
#+RESULTS:
: output.csv

Create an director for images
#+begin_src sh :results output :exports both :tangle no
mkdir img
#+end_src

#+RESULTS:

** Results
:PROPERTIES: 
:HEADER-ARGS:R: :session *R* :tangle plotResults.R :shebang #!/usr/bin/env Rscript
:END:      

Load the CSV into R
#+begin_src R :results output :exports both :var f=csvFile
library(plyr)
df = read.csv(f,header=FALSE,strip.white=TRUE,sep=";")
#names(df) = c("algo","query","",algo","bench","k","time","count")
head(df)
df[12] = NULL
df[10] = NULL
df[8] = NULL
df[4] = NULL
df[3] = NULL
df[2] = NULL
names(df) = c("algo","k","bench","time","refine","count")
head(df)
#+end_src

#+RESULTS:
#+begin_example
             V1    V2 V3   V4    V5              V6       V7
1 GeoHashBinary query  0 TRUE 10000  scan_at_region 0.702538
2 GeoHashBinary query  0 TRUE 10000 apply_at_region 0.253794
3 GeoHashBinary query  1 TRUE 10000  scan_at_region 0.743660
4 GeoHashBinary query  1 TRUE 10000 apply_at_region 0.292071
5 GeoHashBinary query  2 TRUE 10000  scan_at_region 0.734168
6 GeoHashBinary query  2 TRUE 10000 apply_at_region 0.276605
                           V8  V9   V10    V11 V12
1  scan_at_region_refinements 317           NA  NA
2 apply_at_region_refinements 317 count 134870  NA
3  scan_at_region_refinements 405           NA  NA
4 apply_at_region_refinements 405 count 136902  NA
5  scan_at_region_refinements 441           NA  NA
6 apply_at_region_refinements 440 count 135499  NA
           algo     k           bench     time refine  count
1 GeoHashBinary 10000  scan_at_region 0.702538    317     NA
2 GeoHashBinary 10000 apply_at_region 0.253794    317 134870
3 GeoHashBinary 10000  scan_at_region 0.743660    405     NA
4 GeoHashBinary 10000 apply_at_region 0.292071    405 136902
5 GeoHashBinary 10000  scan_at_region 0.734168    441     NA
6 GeoHashBinary 10000 apply_at_region 0.276605    440 135499
#+end_example

Summary of the data frame
#+begin_src R :results output :session :exports both
summary(df[df$algo=="GeoHashBinary",])
summary(df[df$algo=="BTree",])
summary(df[df$algo=="RTree",])
#+end_src

#+RESULTS:
#+begin_example
            algo                   bench             k       
 BTree        :    0   apply_at_region:10000   Min.   :   0  
 GeoHashBinary:50000   insert         :10000   1st Qu.:2500  
 RTree        :    0   ReadElts       :30000   Median :5000  
                                               Mean   :5000  
                                               3rd Qu.:7499  
                                               Max.   :9999  
                                                             
      time              count        
 Min.   : 0.00139   Min.   :    100  
 1st Qu.: 1.34083   1st Qu.: 250075  
 Median : 9.44647   Median : 500050  
 Mean   : 9.02828   Mean   : 500050  
 3rd Qu.:12.87295   3rd Qu.: 750025  
 Max.   :32.73830   Max.   :1000000  
                    NA's   :40000
            algo                   bench             k       
 BTree        :50000   apply_at_region:10000   Min.   :   0  
 GeoHashBinary:    0   insert         :10000   1st Qu.:2500  
 RTree        :    0   ReadElts       :30000   Median :5000  
                                               Mean   :5000  
                                               3rd Qu.:7499  
                                               Max.   :9999  
                                                             
      time              count        
 Min.   : 0.00422   Min.   :    100  
 1st Qu.: 3.59117   1st Qu.: 250075  
 Median :28.44325   Median : 500050  
 Mean   :28.26849   Mean   : 500050  
 3rd Qu.:47.47653   3rd Qu.: 750025  
 Max.   :71.60770   Max.   :1000000  
                    NA's   :40000
            algo                   bench             k       
 BTree        :    0   apply_at_region:10000   Min.   :   0  
 GeoHashBinary:    0   insert         :10000   1st Qu.:2500  
 RTree        :50000   ReadElts       :30000   Median :5000  
                                               Mean   :5000  
                                               3rd Qu.:7499  
                                               Max.   :9999  
                                                             
      time              count        
 Min.   : 0.00464   Min.   :    100  
 1st Qu.: 3.73900   1st Qu.: 250075  
 Median :32.37425   Median : 500050  
 Mean   :32.92621   Mean   : 500050  
 3rd Qu.:57.50140   3rd Qu.: 750025  
 Max.   :72.46010   Max.   :1000000  
                    NA's   :40000
#+end_example

*** Overview of results                                                :plot:

Plot an overview of every benchmark , doing average of times. 
#+begin_src R :results output :exports both
summary_avg = ddply(df ,c("algo","k","bench"),summarise,"time"=mean(time))
#+end_src

#+begin_src R :results output graphics :file "./img/overview.png" :exports both :width 800 :height 600
library(ggplot2)
ggplot(summary_avg, aes(x=k,y=time, color=factor(algo))) + geom_line() + 
facet_wrap(~bench, scales="free",labeller=label_both, ncol=1)
#+end_src

#+RESULTS:
[[file:./img/overview.png]]

*** Insertion performance


#+begin_src R :results output :exports both
insTime  = subset(summary_avg, bench=="insert")
#+end_src

#+RESULTS:

**** Overall                                                        :plot:
#+begin_src R :results output graphics :file "./img/overallInsertion.png" :exports both :width 600 :height 400
ggplot(insTime, aes(x=k,y=time, color=factor(algo))) + 
geom_line() +
facet_wrap(~algo, scales="free", ncol=1)
#+end_src

#+RESULTS:
[[file:./img/overallInsertion.png]]

Total insertion time:
#+begin_src R :results output :session :exports both
ddply(insTime,c("algo"),summarize, Average=mean(time), Total=sum(time))
#+end_src

#+RESULTS:
:            algo    Average      Total
: 1         BTree 0.05150084   515.0084
: 2 GeoHashBinary 0.10885076  1088.5076
: 3         RTree 1.24829441 12482.9441

**** Amortized time

We compute tree time:
- individual insertion time for each batch
- accumulated time at batch #k
- ammortized time : average of the past times at batch #k

#+begin_src R :results output :exports both
avgTime = cbind(insTime, 
                sumTime=c(lapply(split(insTime, insTime$algo), function(x) cumsum(x$time)), recursive=T),
                avgTime=c(lapply(split(insTime, insTime$algo), function(x) cumsum(x$time)/(x$k+1)), recursive=T)
                )
#+end_src

#+RESULTS:

***** Melting the data (time / avgTime)
We need to melt the time columns to be able to plot as a grid

#+begin_src R :results output :session :exports both
library(reshape2)
melted_times = melt(avgTime, id.vars = c("algo","k"),measure.vars = c("time","sumTime","avgTime"))
#+end_src

#+RESULTS:

***** Comparison Time X avgTime                                    :plot:
#+begin_src R :results output graphics :file "./img/grid_times.png" :exports both :width 600 :height 400 
ggplot(melted_times, aes(x=k,y=value,color=factor(algo))) +
geom_line() + 
facet_grid(variable~algo,scales="free", labeller=labeller(variable=label_value))
#facet_wrap(variable~algo,scales="free", labeller=labeller(variable=label_value))
#+end_src

#+RESULTS:
[[file:./img/grid_times.png]]

**** Zoom View 

#+begin_src R :results output graphics :file "./img/Zoom_0.2.png" :exports both :width 600 :height 400
ggplot(insTime, aes(x=k,y=time, color=factor(algo))) + 
geom_line() + ylim(0,0.2) 
#+end_src

#+RESULTS:
[[file:./img/Zoom_0.2.png]]

