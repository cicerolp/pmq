# -*- org-export-babel-evaluate: t; -*-
#+TITLE: Experiment Diary
#+LANGUAGE: en 
#+STARTUP: indent
#+STARTUP: logdrawer hideblocks
#+SEQ_TODO: TODO INPROGRESS(i) | DONE DEFERRED(@) CANCELED(@)
#+TAGS: @JULIO(J)
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n) ignore(n) export(e)
#+CATEGORY: exp
#+OPTIONS: ^:{} todo:nil H:4
#+PROPERTY: header-args :cache no :eval no-export 


* Description 
Benchmark of the remove operation ;

- PMQ / GEOHASH
- BTREE -
- RTREE -  Quadratic algorithm 


** DEFERRED Standalone script 
:LOGBOOK:
- State "DEFERRED"   from "TODO"       [2017-09-14 Qui 10:07]
:END:
To generate the results outside emacs and orgmode you can use the standalone scripts, generated from the tangled source blocks in this file

- parse.sh : parse the results to CSV
- plotResults.R : generate the plots 
  

* INPROGRESS Design of Experiment 

PMA remove elements timely before doubling the array.
The array double only when \tau * PMA_Capacity it reached. 

For several PMA sizes, how is the performance of the remove operation? 
Variables that may affect the remove performance:

- Amount of elements removed at each time: 
  - as a percentage of the total of elements in the data structure. 
  - as an absolute value of elements removed.

- Size of the data structure: because before each removal we need to scan the storage array.
  
** Computation of PMA Capacity

Pma Capacity is computed based on the desired number of elements to store and the \tau parameter:

#+NAME: PmaCap
#+begin_src python :results output :exports both :var n=1000 th=0.7
import math as m
def tauInit(n,th):
    s = n / th / 8
    seg = 2**(m.ceil(m.log2(s)))
    return seg*8

print( tauInit(n,th))
#+end_src

#+RESULTS: PmaCap
: 2048

** Computation of size and frequency of remove operations

- Time window size :: a lower bound on the amount of =Batches= we will keep in-memory 
- Batch size :: the number of elements inserted in each batch
- EMin :: the lower bound of the amount of /elements/ kept in memory ( time window \times batch size ).
- PMA Size :: The capacity of the PMA computed to store =EMin= elements given a \tau value of =0.7=
- Tau Size :: The amount of elements at which the given PMA will be required to remove elements. ( PMA Size \times \tau)

#+CAPTION: Example
| Time Window Size | Batch |  EMin | PMA Size | Rho Size | Tau Size | First removal at batch | #del | Interval (# Batches) |       rm % |
|------------------+-------+-------+----------+----------+----------+------------------------+------+----------------------+------------|
|               15 |  1000 | 15000 |    32768 |    10000 |    22000 |                     22 | 8000 |                    8 | 0.36363636 |
#+TBLFM: $3=$1*$2::$4='(org-sbe PmaCap (n $3) (th 0.7))::$5=ceil(0.3*$4 / $2) * $2::$6=floor(0.7*$4/$2) * $2::$7=$6/$2::$8=($6 + $2 - $3)::$9=$8/$2::$10=$8/$6


We first will test , for a fixed PMA Size, how the percentage of removals affects the performance.

We choose a target Emin = 21600000 and compute the resulting PMA Capacity:
PmaCap(n=21600000,th=0.7) = call_PmaCap(n=21600000,th=0.7) {{{results(=33554432=)}}}. 


This will result in the following setup: 
| Time Window Size | Batch |     EMin | PMA Size | Rho Size | Tau Size | First removal at batch |    #del | Interval (# Batches) |        rm % |
|------------------+-------+----------+----------+----------+----------+------------------------+---------+----------------------+-------------|
|            21600 |  1000 | 21600000 | 33554432 | 10067000 | 23488000 |                  23488 | 1889000 |                 1889 | 0.080424046 |
#+TBLFM: $3=$1*$2::$4='(org-sbe PmaCap (n $3) (th 0.7))::$5=ceil(0.3*$4 / $2) * $2::$6=floor(0.7*$4/$2) * $2::$7=$6/$2::$8=($6 + $2 - $3)::$9=$8/$2::$10=$8/$6

The minimum =EMin= value that result in a PMA Size of =33554432= is \( \frac{PMA\_SIZE}{2}+1 \) = src_python{return (33554432 / 2.0 * 0.7 + 1)} {{{results(=11744052.2=)}}} . 
Example: 
- tauInit(n=11744052,th=0.7) =  call_PmaCap(n=11744052,th=0.7) {{{results(=33554432=)}}}
- tauInit(n=11744051,th=0.7) =  call_PmaCap(n=11744051,th=0.7) {{{results(=16777216=)}}}


The maximum =EMin= value with the this same size is equal to \( PMA\_SIZE \times \tau_h \) = src_python{return (33554432 * 0.7) } {{{results(=23488102.4=)}}} ( when \tau_{h} is =0.7= ) .


We generate several window sizes to test with the allow boundaries of chosen PMA size.
#+begin_src python :results output :exports both
import math as m
batch = 1000
minWs = m.ceil(11744052 / batch)
maxWs = m.floor(23488102.4 / batch)

# Possible variation of window size.
diff = maxWs - minWs;

# Increase the window size logarithmicly from minWs to MaxWs
wSizes = [ round(maxWs - diff/2**i) for i in range(0,10) ]
print( wSizes )
#print ("| Window Size",*wSizes,sep="|\n| ")

#wSizes = [ round(minWs + diff/2**i) for i in range(0,10) ]
#print (wSizes)

#+end_src

#+RESULTS:
: [11745, 17616, 20552, 22020, 22754, 23121, 23305, 23396, 23442, 23465]

#+CAPTION: Experiment variables
| Time Window Size | Batch |     EMin | PMA Size | Rho Size | Tau Size | First removal at batch |     #del | Interval (# Batches) |         rm % |
|------------------+-------+----------+----------+----------+----------+------------------------+----------+----------------------+--------------|
|            11745 |  1000 | 11745000 | 33554432 | 10067000 | 23488000 |                  23488 | 11744000 |                11744 |          0.5 |
|            17616 |  1000 | 17616000 | 33554432 | 10067000 | 23488000 |                  23488 |  5873000 |                 5873 |   0.25004257 |
|            20552 |  1000 | 20552000 | 33554432 | 10067000 | 23488000 |                  23488 |  2937000 |                 2937 |   0.12504257 |
|            22020 |  1000 | 22020000 | 33554432 | 10067000 | 23488000 |                  23488 |  1469000 |                 1469 |  0.062542575 |
|            22754 |  1000 | 22754000 | 33554432 | 10067000 | 23488000 |                  23488 |   735000 |                  735 |  0.031292575 |
|            23121 |  1000 | 23121000 | 33554432 | 10067000 | 23488000 |                  23488 |   368000 |                  368 |  0.015667575 |
|            23305 |  1000 | 23305000 | 33554432 | 10067000 | 23488000 |                  23488 |   184000 |                  184 | 7.8337875e-3 |
|            23396 |  1000 | 23396000 | 33554432 | 10067000 | 23488000 |                  23488 |    93000 |                   93 | 3.9594687e-3 |
|            23442 |  1000 | 23442000 | 33554432 | 10067000 | 23488000 |                  23488 |    47000 |                   47 | 2.0010218e-3 |
|            23465 |  1000 | 23465000 | 33554432 | 10067000 | 23488000 |                  23488 |    24000 |                   24 | 1.0217984e-3 |
#+TBLFM: $3=$1*$2::$4='(org-sbe PmaCap (n $3) (th 0.7))::$5=ceil(0.3*$4 / $2) * $2::$6=floor(0.7*$4/$2) * $2::$7=$6/$2::$8=($6 + $2 - $3)::$9=$8/$2::$10=$8/$6


** Parameters for RTree and Btree 


To compare the BTree / TREE with the PMQ we will define a MAXSIZE that these data structure can have.
This way we afford some slack to perform the removals. 

We set the max size equal to the max number of elements that the PMA can host ( =Tau Size= ). 
At each removal all the elements inserted more =T= Batches in the past are deleted. 

 | Time Window Size (Batches) | Batch | n elts (min elts in tree) | PMA Size | % of Tau Size | Tau Size (Max elts in tree) |
 |----------------------------+-------+---------------------------+----------+---------------+-----------------------------|
 |                      11745 |  1000 |                  11745000 | 33554432 |    0.50004257 |                    23488000 |
 |                      17616 |  1000 |                  17616000 | 33554432 |          0.75 |                    23488000 |
 |                      20552 |  1000 |                  20552000 | 33554432 |         0.875 |                    23488000 |
 |                      22020 |  1000 |                  22020000 | 33554432 |        0.9375 |                    23488000 |
 |                      22754 |  1000 |                  22754000 | 33554432 |       0.96875 |                    23488000 |
 |                      23121 |  1000 |                  23121000 | 33554432 |      0.984375 |                    23488000 |
 |                      23305 |  1000 |                  23305000 | 33554432 |    0.99220879 |                    23488000 |
 |                      23396 |  1000 |                  23396000 | 33554432 |    0.99608311 |                    23488000 |
 |                      23442 |  1000 |                  23442000 | 33554432 |    0.99804155 |                    23488000 |
 |                      23465 |  1000 |                  23465000 | 33554432 |    0.99902078 |                    23488000 |
 #+TBLFM: $3=$2*$1::$5=$3/$6

** Execution parameters 

#+NAME: execParam
| Time Window Size | Batch |    tSize | Results in removal % |
|------------------+-------+----------+----------------------|
|            11745 |  1000 | 23488000 |                  0.5 |
|            17616 |  1000 | 23488000 |           0.25004257 |
|            20552 |  1000 | 23488000 |           0.12504257 |
|            22020 |  1000 | 23488000 |          0.062542575 |
|            22754 |  1000 | 23488000 |          0.031292575 |
|            23121 |  1000 | 23488000 |          0.015667575 |
|            23305 |  1000 | 23488000 |         7.8337875e-3 |
|            23396 |  1000 | 23488000 |         3.9594687e-3 |
|            23442 |  1000 | 23488000 |         2.0010218e-3 |
|            23465 |  1000 | 23488000 |         1.0217984e-3 |

We will run the experiment inserting src_python{return (23488000 * 2)} {{{results(=46976000=)}}} elements.
The measured times are reported in terms of % of Removals:

| % of elts RM | Time of the RM OP | Avg time of the Period |
|--------------+-------------------+------------------------|
|        0.500 |                   |                        |
|        0.250 |                   |                        |
|        0.125 |                   |                        |
|        0.063 |                   |                        |
|        0.031 |                   |                        |
|        0.016 |                   |                        |
|        0.008 |                   |                        |
|        0.004 |                   |                        |
|        0.002 |                   |                        |
|        0.001 |                   |                        |
#+TBLFM: $1=$0;%.3f


* TODO Experiment Script
** DONE Initial Setup 

#+begin_src sh :results value :exports both
expId=$(basename $(pwd))
echo $expId
#+end_src

#+NAME: expId
#+RESULTS:
: exp20170914091842

Set up git branch
#+begin_src sh :results output :exports both
git checkout master
#+end_src

#+RESULTS:

Create EXP branch
#+begin_src sh :results output :exports both :var expId=expId
git checkout -b $expId
#+end_src

#+RESULTS:

Commit branch
#+begin_src sh :results output :exports both :var expId=expId
git status .
git add exp.org
git commit -m "Initial commit for $expId"
#+end_src

#+RESULTS:
#+begin_example
On branch exp20170914091842
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.#exp.org
	exp.html
	exp.org
	exp.pdf
	exp.rst
	exp.tex

nothing added to commit but untracked files present (use "git add" to track)
[exp20170914091842 87d4f4c] Initial commit for exp20170914091842
 1 file changed, 884 insertions(+)
 create mode 100644 data/cicero/exp20170914091842/exp.org
#+end_example

#+begin_src sh :results output :exports both :var expId=expId
git la -3 
#+end_src

#+RESULTS:
: * 87d4f4c (HEAD -> exp20170914091842) Initial commit for exp20170914091842
: * dd21b9e (master) exp insert remove count
: * 1b319c5 wip: labbook

** DONE Export run script 

#+begin_src sh :results output :exports both :var T=execParam[,0] R=execParam[2,1] tSize=execParam[2,2]
n=$((2 * tSize))
for t in $T ;
do
echo "stdbuf -oL ./benchmarks/bench_insert_remove_count -rate ${R} -n ${n} -T ${t} -tSize ${tSize} > \${TMPDIR}/bench_ins_rm_${t}_\${EXECID}.log"
done;
#+end_src

#+RESULTS:
#+begin_example
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 11745 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_11745_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 17616 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_17616_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 20552 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_20552_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 22020 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_22020_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 22754 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_22754_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23121 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23121_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23305 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23305_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23396 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23396_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23442 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23442_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23465 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23465_${EXECID}.log
#+end_example

Use C-u C-c C-v t to tangle this script 
#+begin_src sh :results output :exports both :tangle run.sh :shebang #!/bin/bash :eval never :var expId=expId
set -e
# Any subsequent(*) commands which fail will cause the shell script to exit immediately
echo $(hostname) 

##########################################################
### SETUP THIS VARIABLES

BUILDIR=~/Projects/pmq/build-release
PMABUILD_DIR=~/Projects/hppsimulations/build-release
DATADIR=$(pwd)
# workaround as :var arguments are not been correctly tangled by my orgmode
#expId=$(basename $(pwd) | sed 's/exp//g')
expId=$(basename $(pwd))
TMPDIR=/dev/shm/$expId

# generate output name
if [ $1 ] ; then 
    EXECID=$1
else
    EXECID=$(date +%s)
fi

#########################################################

mkdir -p $TMPDIR
#mkdir -p $DATADIR

# make pma
mkdir -p $PMABUILD_DIR
cd $PMABUILD_DIR
cmake -DCMAKE_BUILD_TYPE="Release" -DTWITTERVIS=ON -DRHO_INIT=OFF ../pma_cd
make 

# make twitterVis
mkdir -p $BUILDIR
cd $BUILDIR 
cmake -DPMA_BUILD_DIR=$PMABUILD_DIR -DCMAKE_BUILD_TYPE="Release" ..
make

#get machine configuration
echo "" > $DATADIR/info.org
~/Projects/pmq/scripts/g5k_get_info.sh $DATADIR/info.org 

# EXECUTE BENCHMARK

#Continue execution even if one these fails
set +e 
# Queries insert remove count
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 11745 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_11745_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 17616 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_17616_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 20552 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_20552_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 22020 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_22020_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 22754 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_22754_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23121 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23121_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23305 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23305_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23396 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23396_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23442 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23442_${EXECID}.log
stdbuf -oL ./benchmarks/bench_insert_remove_count -rate 1000 -n 46976000 -T 23465 -tSize 23488000 > ${TMPDIR}/bench_ins_rm_23465_${EXECID}.log


set -e

cd $TMPDIR
tar -cvzf log_$EXECID.tgz *_$EXECID.log

cd $DATADIR
cp $TMPDIR/log_$EXECID.tgz .

git checkout $expId

git add info.org log_$EXECID.tgz run.sh 
git add -u
git commit -m "Finish execution $EXECID"
git push origin $expId
#+end_src 

** DONE Commit local changes
#+begin_src sh :results output :exports both
git status .
#+end_src

#+RESULTS:
#+begin_example
On branch exp20170907145711
Your branch is up-to-date with 'origin/exp20170907145711'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	$HA
	.#exp.org
	exp.html
	exp.pdf
	exp.rst
	exp.tex

nothing added to commit but untracked files present (use "git add" to track)
#+end_example

#+begin_src sh :results output :exports both
git add run.sh exp.org
git commit -m "UPD: run.sh script"
#git commit --amend -m "UPD: run.sh script"
#+end_src

#+RESULTS:
: [exp20170914091842 3ae2d2f] UPD: run.sh script
:  2 files changed, 123 insertions(+), 14 deletions(-)
:  create mode 100755 data/cicero/exp20170914091842/run.sh

Push to remote
#+begin_src sh :results output :exports both :var expId=expId
#git push bitbucket $expId
git push origin $expId
#+end_src

#+RESULTS:

** Local Execution                                                   :local:ARCHIVE:

#+begin_src sh :results output :exports both :session local :var expId=expId
cd ~/Projects/pmq/data/$(hostname)/$expId
runid=$(date +%s)
tmux new -d -s runExp "cd ~/Projects/pmq/data/$(hostname)/$expId; ./run.sh ${runid} &> run_${runid}"
git add run_$runid
echo $runid
#+end_src

Check process running
#+begin_src sh :results output :exports both :session remote
tmux ls
ps ux
#+end_src

** TODO Remote Execution                                            :remote:

*** Get new changes on remote                                      :remote:
#+begin_src sh :session remote :results output :exports both 
ssh -A cicero
#+end_src

#+RESULTS:
#+begin_example

Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-92-generic x86_64)

 ,* Documentation:  https://help.ubuntu.com
 ,* Management:     https://landscape.canonical.com
 ,* Support:        https://ubuntu.com/advantage

41 packages can be updated.
1 update is a security update.

,*** System restart required ***
Last login: Thu Sep 14 14:59:11 2017 from 143.54.13.218
#+end_example

Get the last script on the remote machine (require entering a password
for bitbucket)
#+begin_src sh :session remote :results output :exports both :var expId=expId
cd ~/Projects/pmq/
git config --add remote.origin.fetch refs/heads/$expId:refs/remotes/origin/$expId
git fetch origin $expId
git checkout $expId
git pull origin $expId
git log -1 | cat 
#+end_src

#+RESULTS:
#+begin_example

julio@cicero:~/Projects/pmq$ julio@cicero:~/Projects/pmq$ remote: Counting objects: 20, done.
(1/17)           remote: Compressing objects:  11% (2/17)           remote: Compressing objects:  17% (3/17)           remote: Compressing objects:  23% (4/17)           remote: Compressing objects:  29% (5/17)           remote: Compressing objects:  35% (6/17)           remote: Compressing objects:  41% (7/17)           remote: Compressing objects:  47% (8/17)           remote: Compressing objects:  52% (9/17)           remote: Compressing objects:  58% (10/17)           remote: Compressing objects:  64% (11/17)           remote: Compressing objects:  70% (12/17)           remote: Compressing objects:  76% (13/17)           remote: Compressing objects:  82% (14/17)           remote: Compressing objects:  88% (15/17)           remote: Compressing objects:  94% (16/17)           remote: Compressing objects: 100% (17/17)           remote: Compressing objects: 100% (17/17), done.        
remote: Total 20 (delta 10), reused 0 (delta 0)
(1/20)   Unpacking objects:  10% (2/20)   Unpacking objects:  15% (3/20)   Unpacking objects:  20% (4/20)   Unpacking objects:  25% (5/20)   Unpacking objects:  30% (6/20)   Unpacking objects:  35% (7/20)   Unpacking objects:  40% (8/20)   Unpacking objects:  45% (9/20)   Unpacking objects:  50% (10/20)   Unpacking objects:  55% (11/20)   Unpacking objects:  60% (12/20)   Unpacking objects:  65% (13/20)   Unpacking objects:  70% (14/20)   Unpacking objects:  75% (15/20)   Unpacking objects:  80% (16/20)   Unpacking objects:  85% (17/20)   Unpacking objects:  90% (18/20)   Unpacking objects:  95% (19/20)   Unpacking objects: 100% (20/20)   Unpacking objects: 100% (20/20), done.
From bitbucket.org:jtoss/pmq
FETCH_HEAD
origin/exp20170914091842
Branch exp20170914091842 set up to track remote branch exp20170914091842 from origin.
Switched to a new branch 'exp20170914091842'
From bitbucket.org:jtoss/pmq
FETCH_HEAD
Already up-to-date.
commit 3ae2d2f23c9d17bc594357a5d5a481c2bc156748
Date:   Thu Sep 14 14:50:36 2017 -0300

    UPD: run.sh script
#+end_example

Update PMA repository on exp machine
#+begin_src sh :session remote :results output :exports both :var expId=expId
cd ~/Projects/hppsimulations/
git pull origin PMA_2016
git log -1 | cat
#+end_src

#+RESULTS:
#+begin_example

julio@cicero:~/Projects/hppsimulations$ remote: Counting objects: 7, done.
(1/7)           remote: Compressing objects:  28% (2/7)           remote: Compressing objects:  42% (3/7)           remote: Compressing objects:  57% (4/7)           remote: Compressing objects:  71% (5/7)           remote: Compressing objects:  85% (6/7)           remote: Compressing objects: 100% (7/7)           remote: Compressing objects: 100% (7/7), done.        
remote: Total 7 (delta 6), reused 0 (delta 0)
(1/7)   Unpacking objects:  28% (2/7)   Unpacking objects:  42% (3/7)   Unpacking objects:  57% (4/7)   Unpacking objects:  71% (5/7)   Unpacking objects:  85% (6/7)   Unpacking objects: 100% (7/7)   Unpacking objects: 100% (7/7), done.
From bitbucket.org:joaocomba/pma
FETCH_HEAD
origin/PMA_2016
Updating 011775f..f37b6b6
Fast-forward
 pma_cd/inc/pma/pma.h         | 10 ++++++++++
 pma_cd/inc/pma/pma_batch.cpp | 15 +++------------
 2 files changed, 13 insertions(+), 12 deletions(-)
commit f37b6b60b2fc16adef345f4097fe54f1996a2213
Date:   Wed Sep 13 10:39:02 2017 -0300

    upd: return del counter on add_rm_array_elts
#+end_example

*** Execute Remotely                                               :remote:

Opens ssh connection and a tmux session

#+begin_src sh :results output :exports both :session remote :var expId=expId
cd ~/Projects/pmq/data/cicero/$expId
runid=$(date +%s)
tmux new -d -s runExp "cd ~/Projects/pmq/data/cicero/$expId; ./run.sh ${runid} &> run_${runid}"
git add run_$runid
echo $runid
#+end_src

#+RESULTS:
: 
: julio@cicero:~/Projects/pmq/data/cicero/exp20170914091842$ julio@cicero:~/Projects/pmq/data/cicero/exp20170914091842$ julio@cicero:~/Projects/pmq/data/cicero/exp20170914091842$ julio@cicero:~/Projects/pmq/data/cicero/exp20170914091842$ 1505412076

Check process running
#+begin_src sh :results output :exports both :session remote
tmux ls
ps ux
#+end_src

#+RESULTS:
#+begin_example
runExp: 1 windows (created Thu Sep 14 15:01:16 2017) [80x23]
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
julio    19348  0.0  0.0  45248  4668 ?        Ss   14:59   0:00 /lib/systemd/sy
julio    19350  0.0  0.0 145364  2112 ?        S    14:59   0:00 (sd-pam)
julio    19423  0.0  0.0  97464  3328 ?        S    15:00   0:00 sshd: julio@pts
julio    19424  0.0  0.0  22688  5224 pts/9    Ss   15:00   0:00 -bash
julio    19482  0.0  0.0  29420  2948 ?        Ss   15:01   0:00 tmux new -d -s 
julio    19483  0.0  0.0  12532  3020 pts/10   Ss+  15:01   0:00 bash -c cd ~/Pr
julio    19485  0.0  0.0  12540  3104 pts/10   S+   15:01   0:00 /bin/bash ./run
julio    19860  0.0  0.0   9676  2380 pts/10   S+   15:01   0:00 make
julio    19863  0.0  0.0   9676  2328 pts/10   S+   15:01   0:00 make -f CMakeFi
julio    19877 10.0  0.0  12756  5404 pts/10   S+   15:01   0:00 make -f CMakeFi
julio    19880  0.0  0.0   4508   716 pts/10   S+   15:01   0:00 /bin/sh -c /usr
julio    19881  0.0  0.0   8352   860 pts/10   S+   15:01   0:00 /usr/bin/c++ -I
julio    19882  163  1.4 576812 469920 pts/10  R+   15:01   0:01 /usr/lib/gcc/x8
julio    19886  0.0  0.0  37368  3312 pts/9    R+   15:01   0:00 ps ux
#+end_example

**** DONE Pull local 
#+begin_src sh :results output :exports both :var expId=expId
git commit -a -m "wip"
git status
git pull --rebase origin $expId
#+end_src

#+RESULTS:
#+begin_example
[exp20170907112116 b3f673f] wip
 1 file changed, 8 insertions(+), 14 deletions(-)
On branch exp20170907112116
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	../../../LabBook.org.orig
	../../../benchmarks/bench_insert_and_scan.cpp.orig
	../../../build-Release/
	../exp20170904153555/
	../exp20170907105314/
	../exp20170907105804/
	.#exp.org
	img/
	nil.csv
	teste.csv

nothing added to commit but untracked files present (use "git add" to track)
First, rewinding head to replay your work on top of it...
Applying: wip experiment
Applying: wip
#+end_example


* TODO Analisys
** Generate csv files
:PROPERTIES: 
:HEADER-ARGS:sh: :tangle parse.sh :shebang #!/bin/bash
:END:      

List logFiles
#+begin_src sh :results table :exports both
ls -htl *tgz
#+end_src

#+RESULTS:
| -rw-rw-r-- 1 julio julio 1018K Set  7 12:35 log_1504795600.tgz |

#+NAME: logFile
#+begin_src sh :results output :exports both 
tar xvzf log_1504795600.tgz
#+end_src

#+RESULTS: logFile
: bench_insert_and_scan_1504795600.log

Create CSV using logFile 
#+begin_src sh :results output :exports both :var logFile=logFile[0]
#echo $logFile
echo $(basename -s .log $logFile ).csv
grep "GeoHashBinary\|BTree\|RTree ;" $logFile | sed "s/InsertionBench//g" >  $(basename -s .log $logFile ).csv
#+end_src

#+NAME: csvFile
#+RESULTS:
: bench_insert_and_scan_1504795600.csv

Create an director for images
#+begin_src sh :results output :exports both :tangle no
mkdir img
#+end_src

#+RESULTS:

** Results
:PROPERTIES: 
:HEADER-ARGS:R: :session *R* :tangle plotResults.R :shebang #!/usr/bin/env Rscript
:END:      

Load the CSV into R
#+begin_src R :results output :exports both :var f=csvFile
library(tidyverse)

df <- f[[1]] %>%
    read_delim(delim=";",trim_ws = TRUE, col_names = paste("V",c(1:8),sep="") )

str(df)

#+end_src

#+RESULTS:
#+begin_example
Parsed with column specification:
cols(
  V1 = col_character(),
  V2 = col_integer(),
  V3 = col_character(),
  V4 = col_double(),
  V5 = col_character(),
  V6 = col_integer(),
  V7 = col_character(),
  V8 = col_integer()
)
Warning: 150000 parsing failures.
row # A tibble: 5 x 5 col     row   col  expected    actual                                   file expected   <int> <chr>     <chr>     <chr>                                  <chr> actual 1     1  <NA> 8 columns 5 columns 'bench_insert_and_scan_1504795600.csv' file 2     2  <NA> 8 columns 7 columns 'bench_insert_and_scan_1504795600.csv' row 3     3  <NA> 8 columns 7 columns 'bench_insert_and_scan_1504795600.csv' col 4     4  <NA> 8 columns 7 columns 'bench_insert_and_scan_1504795600.csv' expected 5     5  <NA> 8 columns 9 columns 'bench_insert_and_scan_1504795600.csv'
... ................. ... ........................................................................ ........ ........................................................................ ...... ........................................................................ .... ........................................................................ ... ......................................................... [... truncated]
Warning message:
In rbind(names(probs), probs_f) :
  number of columns of result is not a multiple of vector length (arg 1)
Classes ‘tbl_df’, ‘tbl’ and 'data.frame':	150000 obs. of  8 variables:
 $ V1: chr  "GeoHashBinary" "GeoHashBinary" "GeoHashBinary" "GeoHashBinary" ...
 $ V2: int  0 0 0 0 0 1 1 1 1 1 ...
 $ V3: chr  "insert" "scan_at_region" "scan_at_region" "scan_at_region" ...
 $ V4: num  0.018055 0.00046 0.000476 0.000448 0.00195 ...
 $ V5: chr  NA "scan_at_region_refinements" "scan_at_region_refinements" "scan_at_region_refinements" ...
 $ V6: int  NA 1 1 1 1 NA 1 1 1 1 ...
 $ V7: chr  NA NA NA NA ...
 $ V8: int  NA NA NA NA 100 NA NA NA NA 200 ...
 - attr(*, "problems")=Classes ‘tbl_df’, ‘tbl’ and 'data.frame':	150000 obs. of  5 variables:
  ..$ row     : int  1 2 3 4 5 6 7 8 9 10 ...
  ..$ col     : chr  NA NA NA NA ...
  ..$ expected: chr  "8 columns" "8 columns" "8 columns" "8 columns" ...
  ..$ actual  : chr  "5 columns" "7 columns" "7 columns" "7 columns" ...
  ..$ file    : chr  "'bench_insert_and_scan_1504795600.csv'" "'bench_insert_and_scan_1504795600.csv'" "'bench_insert_and_scan_1504795600.csv'" "'bench_insert_and_scan_1504795600.csv'" ...
 - attr(*, "spec")=List of 2
  ..$ cols   :List of 8
  .. ..$ V1: list()
  .. .. ..- attr(*, "class")= chr  "collector_character" "collector"
  .. ..$ V2: list()
  .. .. ..- attr(*, "class")= chr  "collector_integer" "collector"
  .. ..$ V3: list()
  .. .. ..- attr(*, "class")= chr  "collector_character" "collector"
  .. ..$ V4: list()
  .. .. ..- attr(*, "class")= chr  "collector_double" "collector"
  .. ..$ V5: list()
  .. .. ..- attr(*, "class")= chr  "collector_character" "collector"
  .. ..$ V6: list()
  .. .. ..- attr(*, "class")= chr  "collector_integer" "collector"
  .. ..$ V7: list()
  .. .. ..- attr(*, "class")= chr  "collector_character" "collector"
  .. ..$ V8: list()
  .. .. ..- attr(*, "class")= chr  "collector_integer" "collector"
  ..$ default: list()
  .. ..- attr(*, "class")= chr  "collector_guess" "collector"
  ..- attr(*, "class")= chr "col_spec"
#+end_example

Remove useless columns
#+begin_src R :results output :exports both :session 

names(df) <- c("algo", "id", "bench" , "time" , "V5" , "V6"  , "V7" , "count")

df <- select(df, -V5, -V6, -V7)
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 150,000 x 5
            algo    id           bench     time count
           <chr> <int>           <chr>    <dbl> <int>
 1 GeoHashBinary     0          insert 0.018055    NA
 2 GeoHashBinary     0  scan_at_region 0.000460    NA
 3 GeoHashBinary     0  scan_at_region 0.000476    NA
 4 GeoHashBinary     0  scan_at_region 0.000448    NA
 5 GeoHashBinary     0 apply_at_region 0.001950   100
 6 GeoHashBinary     1          insert 0.013157    NA
 7 GeoHashBinary     1  scan_at_region 0.000809    NA
 8 GeoHashBinary     1  scan_at_region 0.000797    NA
 9 GeoHashBinary     1  scan_at_region 0.000769    NA
10 GeoHashBinary     1 apply_at_region 0.000585   200
# ... with 149,990 more rows
#+end_example

Summary of the data frame
#+begin_src R :results output :session :exports both
summary(df[df$algo=="GeoHashBinary",])
summary(df[df$algo=="BTree",])
summary(df[df$algo=="RTree",])
#+end_src

#+RESULTS:
#+begin_example
     algo                 id          bench                time         
 Length:50000       Min.   :   0   Length:50000       Min.   : 0.00024  
 Class :character   1st Qu.:2500   Class :character   1st Qu.: 0.08270  
 Mode  :character   Median :5000   Mode  :character   Median : 0.77856  
                    Mean   :5000                      Mean   : 1.72410  
                    3rd Qu.:7499                      3rd Qu.: 3.15301  
                    Max.   :9999                      Max.   :14.36430  
                                                                        
     count        
 Min.   :    100  
 1st Qu.: 250075  
 Median : 500050  
 Mean   : 500050  
 3rd Qu.: 750025  
 Max.   :1000000  
 NA's   :40000
     algo                 id          bench                time        
 Length:50000       Min.   :   0   Length:50000       Min.   : 0.0007  
 Class :character   1st Qu.:2500   Class :character   1st Qu.: 0.2962  
 Mode  :character   Median :5000   Mode  :character   Median : 4.5789  
                    Mean   :5000                      Mean   : 5.6744  
                    3rd Qu.:7499                      3rd Qu.: 9.7199  
                    Max.   :9999                      Max.   :19.0842  
                                                                       
     count        
 Min.   :    100  
 1st Qu.: 250075  
 Median : 500050  
 Mean   : 500050  
 3rd Qu.: 750025  
 Max.   :1000000  
 NA's   :40000
     algo                 id          bench                time          
 Length:50000       Min.   :   0   Length:50000       Min.   : 0.000969  
 Class :character   1st Qu.:2500   Class :character   1st Qu.: 0.797774  
 Mode  :character   Median :5000   Mode  :character   Median : 8.138380  
                    Mean   :5000                      Mean   : 9.244019  
                    3rd Qu.:7499                      3rd Qu.:17.638125  
                    Max.   :9999                      Max.   :24.549800  
                                                                         
     count      
 Min.   : NA    
 1st Qu.: NA    
 Median : NA    
 Mean   :NaN    
 3rd Qu.: NA    
 Max.   : NA    
 NA's   :50000
#+end_example

*** Overview of results                                                :plot:

Plot an overview of every benchmark , doing average of times. 
#+begin_src R :results output :exports both
df %>% group_by(algo,id,bench, count) %>%
    summarize(ms = mean(time), stdv = sd(time)) -> dfplot

dfplot
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 90,000 x 6
# Groups:   algo, id, bench [?]
    algo    id           bench count          ms         stdv
   <chr> <int>           <chr> <int>       <dbl>        <dbl>
 1 BTree     0 apply_at_region   100 0.000945000           NA
 2 BTree     0          insert    NA 0.007075000           NA
 3 BTree     0  scan_at_region    NA 0.000775000 7.238094e-05
 4 BTree     1 apply_at_region   200 0.000700000           NA
 5 BTree     1          insert    NA 0.007709000           NA
 6 BTree     1  scan_at_region    NA 0.001430667 9.814955e-06
 7 BTree     2 apply_at_region   300 0.000763000           NA
 8 BTree     2          insert    NA 0.006893000           NA
 9 BTree     2  scan_at_region    NA 0.002117000 5.196152e-06
10 BTree     3 apply_at_region   400 0.000829000           NA
# ... with 89,990 more rows
#+end_example

#+begin_src R :results output graphics :file "./img/overview.png" :exports both :width 800 :height 600
library(ggplot2)

dfplot %>% 
#    ungroup %>% 
 #   mutate(bench = revalue( bench, c("apply_at_region" = "count"))) %>% 
ggplot(aes(x=id,y=ms, color=factor(algo))) + 
    geom_line() +
    #geom_errorbar(aes(ymin = ms - stdv, ymax = ms + stdv), width = 0.3 ) +
    facet_wrap(~bench, scales="free",ncol=1,labeller=labeller(bench=c(apply_at_region="Global Count", insert="Insertion", scan_at_region="Golbal scan")))
#+end_src

#+RESULTS:
[[file:./img/overview.png]]

*** DONE Insertion performance

#+begin_src R :results output :exports both :session 
 dfplot %>% filter( bench == "insert") -> dfinsert
#+end_src

#+RESULTS:

**** Overall                                                        :plot:
#+begin_src R :results output graphics :file "./img/overallInsertion.png" :exports both :width 600 :height 400
dfinsert %>%
ggplot(aes(x=id,y=ms, color=factor(algo))) + 
geom_line() +
labs(title = "Insertions") + 
facet_wrap(~algo, scales="free", ncol=1)
#+end_src

#+RESULTS:
[[file:./img/overallInsertion.png]]

Total insertion time:
#+begin_src R :results append :session :exports both
dfinsert %>% 
    group_by(algo) %>%
    summarize(Avergae = mean(ms), Total = sum(ms))

#+end_src

#+RESULTS:
:            algo    Average      Total
: 1         BTree 0.05150084   515.0084
: 2 GeoHashBinary 0.10885076  1088.5076
: 3         RTree 1.24829441 12482.9441
| BTree         |   0.03546119 |   354.6119 |
| GeoHashBinary | 0.0793330121 | 793.330121 |
| RTree         |  0.586476944 | 5864.76944 |
| BTree         |   0.03546119 |   354.6119 |
| GeoHashBinary | 0.0793330121 | 793.330121 |
| RTree         |  0.586476944 | 5864.76944 |

**** Amortized time

We compute tree time:
- individual insertion time for each batch
- accumulated time at batch #k
- ammortized time : average of the past times at batch #k

#+begin_src R :results output :exports both
avgTime = cbind(dfinsert, 
                sumTime=c(lapply(split(dfinsert, dfinsert$algo), function(x) cumsum(x$ms)), recursive=T),
                avgTime=c(lapply(split(dfinsert, dfinsert$algo), function(x) cumsum(x$ms)/(x$id+1)), recursive=T)
                )
#+end_src

#+RESULTS:
: # A tibble: 3 x 3
:            algo    Avergae     Total
:           <chr>      <dbl>     <dbl>
: 1         BTree 0.03546119  354.6119
: 2 GeoHashBinary 0.07933301  793.3301
: 3         RTree 0.58647694 5864.7694

***** Melting the data (time / avgTime)
We need to melt the time columns to be able to plot as a grid

#+begin_src R :results output :exports both :session 
avgTime %>% 
    select(-count,-stdv) %>%
    gather(stat, value, ms, sumTime, avgTime) -> melted_times

melted_times
#+end_src

#+RESULTS:
#+begin_example
Warning message:
attributes are not identical across measure variables;
they will be dropped
# A tibble: 90,000 x 5
# Groups:   algo, id, bench [30,000]
    algo    id  bench  stat    value
   <chr> <int>  <chr> <chr>    <dbl>
 1 BTree     0 insert    ms 0.007075
 2 BTree     1 insert    ms 0.007709
 3 BTree     2 insert    ms 0.006893
 4 BTree     3 insert    ms 0.006529
 5 BTree     4 insert    ms 0.006903
 6 BTree     5 insert    ms 0.006266
 7 BTree     6 insert    ms 0.006714
 8 BTree     7 insert    ms 0.007016
 9 BTree     8 insert    ms 0.006645
10 BTree     9 insert    ms 0.007688
# ... with 89,990 more rows
#+end_example

***** Comparison Time X avgTime                                    :plot:
#+begin_src R :results output graphics :file "./img/grid_times.png" :exports both :width 600 :height 400 
melted_times %>%
    ggplot(aes(x=id,y=value,color=factor(algo))) +
geom_line() + 
facet_grid(stat~algo,scales="free", labeller=labeller(stat=label_value))
#facet_wrap(variable~algo,scales="free", labeller=labeller(variable=label_value))
#+end_src

#+RESULTS:
[[file:./img/grid_times.png]]

**** Zoom View                                                      :plot:

#+begin_src R :results output graphics :file "./img/Zoom.png" :exports both :width 600 :height 400
avgTime %>% 
    ggplot(aes(x=id, color=factor(algo))) + 
    labs(title="Insertions") +
    geom_point(aes(y=ms), alpha=1) +
#    geom_line(aes(y=avgTime)) + 
    ylim(0,1) 
#+end_src

#+RESULTS:
[[file:./img/Zoom.png]]

