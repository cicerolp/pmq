# -*- org-export-babel-evaluate: nil; -*-
#+TITLE: Paper VLDB
#+LANGUAGE: en 
#+STARTUP: indent
#+STARTUP: logdrawer hideblocks
#+SEQ_TODO: TODO INPROGRESS(i) | DONE DEFERRED(@) CANCELED(@)
#+TAGS: @JULIO(J) @CICERO(C) @BRUNO(B)
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n) export(e)
#+OPTIONS: ^:{} H:3
#+PROPERTY: header-args :cache no :eval no-export

Plan for a VLDB paper.

* Contex
Data-structure for In-memory, Geo-spatial, Streaming data, range-queries

** Geospatial data
Tree based DS: 
- R-tree : 2D index
- B-tree : 1D index -> using Z-index

** Streaming
Trees than can insert and delete efficiently

** Operations
- Insertion
- Temporal Deletions
- Range Queries

** How to do a range Query? 
Search Key inside a bounding box;

- R-Tree: Support it natively?

- B-Tree / 1D Z-order: Two steps
  - Convert a 2D range into n 1D ranges
  - find each range in the B-tree

** Problem of R-Tree / B-tree
- Ages very fast, data gets fragmentes in memory.
  - Range queries tend to degrade very fast. (*TO CONFIRM*) 

- maintaining pointers as overhead of storage cost. 
  
* PMQ 
** Proposal
- Z-order in a PMA
- range-queries = Binary Search O(log n).

** Advantages
Range-Queries are more eficient in a PMA . 

B-Trees age very fast and suffer from fragmentation in memoruy (does it happens in R-tree too? ) 

** Disadvantage
- It's an amortized data structure. Some operations are slower than others. 

* Open questions

** Range queries - query by geografic coordinates ? 
- Should we use the data with latitude / longitude , or with grid coordinates? 

R-tree can handle the latitude/longitude directly. 
Geohash converts it to "tile" coordinates of fixed resolution. 

- Quering in geohash grid has a fixed resolution. 

>> *Solution* limit the lat / lon precision to same precision of the geohash. 

note: Avoind checking the (lat,lon) of each element in the refined quadrant.

** Comparisons with state of the art ( Fractal Tree ? ) 

- Fractal Tree :: Based on BIB:bender2007a (cache-oblivious streaming B-trees)
                  
  - implemented in Tokutek Db / Precona
  - BTree + PMA ? 
  - Made for disk access. 
  
*** TODO Check if this assumptions
- Pointer and explicit tree management might be an overhead. 
- Doest it realy has a pointer-base tree , or is it linearized ? 

*** TODO Can we run their benchmarks for comparison

** How to do the refinement of the "quadtree" using geohash only
NOSQL, <key,value> databases like redis support geohash operations.
Check if their algorithm do something more clever that what we do. 

Example: Redis

** How to implement temporal deletion on R-Tree / B-tree? 

** R-tree vs B-tree

- R-tree > B-tree
- R-tree supports 2D queries natively
- B-tree needs to linearize the index first. 

* Task List
** TODO Implementation R-tree
** TODO Implementation B-tree
https://github.com/runshenzhu/palmtree

stx:btree 

** TODO Check code from Fractal-Tree
** TODO Read detail of BIB:Bender2007a
** TODO Review how to compute GEOHASH eficiently from Lat / Lon.
https://en.wikipedia.org/wiki/Geohash
** TODO See how are the geohash implementations in Key-value store DB
Geohash implementation on Redis no-sql
https://redis.io/commands/geohash

- Elastic Search:
  
  Standar GEoHash ? 
  https://www.elastic.co/guide/en/elasticsearch/guide/current/geohashes.html
  
  Quatrees ? 
  https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html#prefix-trees

  

** TODO Check algorithm to convert 2D -> 1D index

Eu acho que os DB baseados em B-tree escaneiam todos os ids entre os Ids da bounding box

(não fazem o refinamento de quadtree)


Idéa: algoritmo hibrido entre refinamento de quadtree e scan linear de geohash.
