# -*- org-export-babel-evaluate: nil; -*-
#+TITLE: Lab book for PMQ project
#+LANGUAGE: en 
#+STARTUP: indent
#+STARTUP: logdrawer hideblocks
#+SEQ_TODO: TODO INPROGRESS(i) | DONE DEFERRED(@) CANCELED(@)
#+TAGS: @JULIO(J) @CICERO(C) @BRUNO(B)
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n) export(e)
#+OPTIONS: ^:{} H:3
#+PROPERTY: header-args :cache no :eval no-export

* README
This file contains the research notes about the PMQ project targeting a submission to PVLDB journal

Old labbook from the twitterVis project was moved to [[file:TwitterVis_labBook.org]]

* [2017-06-25 Dom] Notes sent by Bruno                               :@BRUNO:

Following one reviewer comment, I agree that we need to compare performance at the same level so
not our PMA implementation against a full blown database, but take instead  classical DB data structures. I identified two:
 -  R-tree for georeference data: One implementation avaiable in boost: http://www.boost.org/doc/libs/1_64_0/libs/geometry/doc/html/geometry/spatial_indexes.html
- B-tree that we couple with a Z-ccurve for indexing. I did not look at available implementation but very likely many available.

https://opensource.googleblog.com/2013/01/c-containers-that-save-memory-and-time.html

https://code.google.com/archive/p/cpp-btree/

https://github.com/algorithm-ninja/cpp-btree

A pending question is if parallelism would be a significant add. I still balieve so, but we may be short on time. The other consern
is to find parallel R-tree or B-tree this is not that common. I have to investigate a little more.


** R-tree:
*** Sequential: http://www.boost.org/doc/libs/1_64_0/libs/geometry/doc/html/geometry/spatial_indexes.html
The performance of the R-tree depends on balancing algorithm, parameters and data inserted into the container.
* Linear algorithm
* Quadratic algorithm
* R*-tree
* Packing algorithm


**** Slide presenting ideas for preloading a R-tree in parallel and with less overlap (use a space filling curve): http://www.mathematik.uni-marburg.de/~achakeye/publications/big_spatial_2012.pdf

** B-tree:
*** A B+-tree parallel implementing various optimizations.  https://github.com/runshenzhu/palmtree
*** Based on a VLDB 2011 paper:
 J. Sewall, J. Chhugani, C. Kim, N. Satish, and P. Dubey. PALM: Parallel architecture-friendly latch-free modifications to B+ trees on many-core processors. Proc. VLDB Endowment, 4(11):795--806, August 2011.
*** Several interesting aspects:
**** Optimization of mem allocator
**** Work by batches
**** Tried  SIMD optimization
**** Del a given key.

* [2017-07-07 Sex] PMA vs Btres ?                                    :@JULIO:

** Parallel implementation of B+ trees

Related to sugestions that Bruno had.

BIB:Sewall2011
https://github.com/runshenzhu/palmtree

The problem of PMA :
- Queying is not very efficient. binnay search with no index didn't show up very good perf.

- What are the benchmarks that this guys used. 

- Is there any work about querying on streaming workloads ? 

- What is a streaming benchmark ?
